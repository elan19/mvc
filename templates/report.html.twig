{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>
    <div class="left report-big">
        <h3 id="kmom01">Kmom01</h3>
        <p>
            Sedan tidigare har jag jobbat en del med objektorientad programmering inom C++ och python men aldrig gjort något inom PHP så kommer bli interssant.
            Alltid roligt att lära sig nya områden och förhoppningsvis kunna ha använding av det jag lärt mig innan. Samt så blir det intressant att 
            använda sig av Json.
            En klass är en struktur som kodaren skapar med hjälp av medlemsvariabler och metoder och kan ses som en mall. 
            Sedan kan man skapa ett eller flera objekt av den klassen och använda dem i sitt program.
        </p>
        <p>
            Hittills tycker jag det verkar relativt lätt att följa med vad varje grej i kodbasen gör. Vi har våra olika Controllers som t.ex. Json och Twig
            controllerna. Twig controllern jobbar med själva "sidan" och returnerar till twig sidorna eller html sidorna som har en uppbyggnad för att
            användaren ska kunna se en "livad" sida med länkar, bilder, text med mera. Json controllern däremot returnerar bara till en sida som visar Json
            text och har då ingen "livad" sida runt omkring sig. Däremot tycker jag det är lite svårt att veta vad allting i Controller filerna gör
            och hur de fungerar. Men det lär jag mig nog mer allt eftersom man jobbar med det. 
        </p>
        <p>
            Har inte läst artikeln så kan tyvärr inte svara på den frågan. Men tycker om att man kan skapa sin egna lokala server direkt i terminalen utan
            krångel.
        </p>
        <p>
            Under detta kmom började jag lära mig om Json, då det är helt nytt för mig. Jag hoppas vi kommer använda oss mer om det då jag inte kan
            mycket om det området.
        </p>
        <h3 id="kmom02">Kmom02</h3>
        <p>Arv inom objektorientad programmering är att en klass ärver, utnyttjar, tidigare skriven kod från en annan klass. T.ex. om vi har Fordon
            som en klass och en annan klass Bil samt Buss så kan Bil ärva variabler samt funktioner från Fordon. Man kan då utnyttja arv för vissa saker
            som både Bil och Buss kommer ha gemensamt, som exempelvis däck. Komposition är att en klass 'äger' en annan klass och använder sig av
            den klassen. Man brukar kunna säga att klassen 'has a' situation. T.ex. där Car 'has' wheels eller Car 'has' brakes. I php finns inte
            multipel arv, utan istället använder programmering språket sig av trait, där man kan tänka sig att traitens kod 'kopieras' in i klassen,
            och kan vara återanvändbar. Interface är en slags kodstruktur eller liknande som innehåller ett en uppsättning kod eller metoder som
            man genom att implementera interfacet i en klass vet vilka metoder som finns i klassen samt vad man kan göra med klassen.

            Har själv inte använt mig av Trait eller Interface tidigare och tycker konceptet låter lite konstigt fortfarande. Men kanske löser sig
            ifall man börjar jobba med det.
        </p>
        <p>
            Jag började med att utgå från en grund som jag hade byggt upp till klasserna som behövdes. Därefter började jag med att koda fram webbsidorna
            stegvis, sida för sida och att få dem att fungera korrekt. Under tidens gång märke jag att jag behövde ha med lite mer funktioner
            och kunde då utan problem lägga till dem. Efter att webbsidan var helt klar valde jag att göra UML-diagrammet då jag visste att det inte
            tillkom några variabler eller funktioner. Tillsist gick jag vidare med att skapa Json sidorna och få dem att fungera korrekt. Utifrån mina
            erfarenheter inom området och sättet vi kodar på under kursen är jag nöjd med mina sidor. Tycker webbsidan är stilig och simpel, min kod samt
            klasser är enligt mig lätt att hitta runt i samt relativt beskrivande och med bra struktur.
        </p>
        <p>
            Tycker det var rätt intressant att programmera fram ett kortlek där man kan skapa kortlek, shuffla, dra kort samt visa kort man har dragit.
            Utifrån detta går det sedan att efterhand bygga ut hela kortspelet man har ifall man skulle vilja. Tycker även min tankearbete var relativit
            okej, men det är lättare sagt om sig själv.
        </p>
        <p>
            Under detta kmom måste jag ändå säga att sättet att bygga klasser och utnyttja dem i sin webbsida är det nya jag lärt mig, samt ökad
            information om hur controller delen och Json fungerar.
        </p>
        <h3 id="kmom03">Kmom03</h3>
        <p>
            Jag kan förstå att flödesdiagram och pseudokod har sin roll att spela ifall man vill påbörja något nytt projekt där man inte har delarna som
            behövs redan. Däremot nu så kändes det relativt simpelt att jobba igenom uppgiften eftersom klasserna fanns sedan tidigare samt att det stod
            på hemsidan på ett ungefär hur man skulle göra uppgiften. Därför kände jag att jag inte behövde planera allt för mycket om hur 
            självaste spelet skulle fungera. Men jag ser fördelar med att använda sig av det i början på ett nytt projekt.
        </p>
        <p>
            Jag valde att utgå en del från förra kmom där vi gjorde ett slags kortspel och därefter bygga ut och ändra. Till en början gjorde jag 
            hemsidan där man kommer efter att man klickat på knappen "starta spel" och därifrån gick jag stegvis, tog draw knappen och sist stay knappen.
            Klasserna fanns sedan förra kmom så på den delen behövdes inte lägga till någon ny kod utan det var mestadels att jobba med ny kontroller
            och få den att fungera som jag ville. Sist gjorde jag API delen och la till dokumentationen.
            Jag är nöjd med spelet i sig, däremot känner jag att man kanske skulle kunnat göra sidan mer 'livad' och rolig genom att ha bilder på varje
            kort som dras, för att på så sätt visa tydligare för spelaren vad som sker. Man kunde även ha lagt till vem som vann
            efter att både spelaren och dealern har dragit sina kort. Men utöver det är jag nöjd.
        </p>
        <p>
            Tycker det verkar relativt okej att koda i ramverket. I början kändes det som att det skulle kunna vara krångligt med massor av olika delar
            men nu efter några veckor så känns det relativt lugnt och man vet var man har de olika delarna av sin kod.
        </p>
        <p>
            Under detta kmom är nog flödesdiagram det nya, kan inte minnas att jag jobbat med det tidigare. Annars skulle jag säga att det var en hel del
            repetition från förra kmom där vi påbörjade ett kortspel på liknande sätt som i detta kmom.
        </p>
        <h3 id="kmom04">Kmom04</h3>
        <p>
            Själva PHPUnit testerna var rätt simpla och nyttiga att göra för att se ifall man har fel eller liknande. Däremot tycker jag att det var struligt
            hur man skulle få fram själva PHPUnit delen i uppgiften. Följde övningen och gick sedan in på uppgiften, och missade en liten text del som var
            avgörande för ifall det skulle funka eller inte. Och den textdelen stod inte under krav utan som introduktion. Utöver det var det inget speciellt
            med PHPUnit.
        </p>
        <p>
            Jag gjorde kodtäckning på mina klasser inuti Card mappen, och på de fyra klasserna lyckades jag få 100% kodtäckning. Så därför tycker jag min 
            kod är testbar och fungerar som tänkt. Men finns alltid saker man kan ändra för att förbättra, däremot inget man behöver lägga tid på när det
            fungerar som tänkt.
        </p>
        <p>
            Valde att inte ändra något i min kod, eftersom det fungerade som planerat på första försöket.
        </p>
        <p>
            Jag tycker att ifall koden man har skrivit är lätt att testa och fungerar som tänkt när man testar den så är koden ren kod. Sedan ifall den är
            "snygg" är alltid personligt, men ifall någon annan kan göra tester på koden så är den enligt mig snygg.
        </p>
        <p>
            Under detta kmom lärde jag mig lite av exempel på tester man kan göra på PHP kod. Kan finnas tillfällen det har sin nytta men personligen kände 
            jag inte att det var något jätte nödvändigt. Eftersom testerna jag gjorde idag var saker jag redan visste fungerade från tidigare kmom.
        </p>
        <h3 id="kmom05">Kmom05</h3>
        <p>
            Det gick relativt bra att jobba igenom övningen, däremot är jag inte helt hundra på vad doctrine är trots att jag jobbat igenom övningen.
            Så man kanske får läsa på lite mer om det.
        </p>
        <p>
            Kan inte påstå att jag tänkte på något speciellt när jag gjorde uppgiften. Följde den uppifrån och ner och tog det stegvis. Gjorde varje
            punkt och kollade så att det fungerade som jag ville innan jag fortsatte till nästa punkt. Gränssnittet ändrade jag lite på tabellen 
            där alla böcker syns, för att få det lite snyggare på sidan. Annars gjorde jag inte något speciellt gränssnitt.
        </p>
        <p>
            Tyckte det flöt på bra under uppgiften. Tycker det var rätt trevligt att jobba med efter man har skapat allting. Däremot tycker jag skapandet
            var lite krångligt i jämförelse med tidigare sätt (databas kursen). Där var det lättare att förstå varje del och hur det fungerar ihop.
        </p>
        <p>
            Som jag skrev i förra stycket tycker jag det verkar rätt smidigt att jobba med, men att jag inte riktigt lärt mig varje steg hur det fungerar
            fullt ut. Så för tillfället finns det saker jag tycker är positiva, t.ex. att det kändes lätt att jobba med, och saker som jag tycker är
            negativa, t.ex. att sätta upp det och förstå varje process i det.
        </p>
        <p>
            Under detta kmom fick man testa nytt sätt att använda databaser på och tycker det verkar intressant.
        </p>
        <h3 id="kmom06">Kmom06</h3>
        <p>
            Tyckte PHPMetrics kändes som en relativt bra sätt för att kontrollera sin kodstruktur, genom potentiella buggar, komplexitet samt violations.
            Man fick även en inblick i hur många kodrader, klasser och tester man har gjort till sitt program vilket kan vara intressant.
            Som t.ex. så hittade den ett error jag hade i min kod angående en api sida som jag inte visste tidigare som jag fixade. Man kunde även
            se snabbt vilka klasser som är komplexa och som man kanske ska tänka på att fixa till ifall man kan och har tid. Det jag gillade mest
            med PHPMetrics måste nog vara bilden som visade komplexiteten på de olika klasserna man har gjort. Tycker den visar tydligt vilka klasser
            som är "de stora" och har mest innehåll.
        </p>
        <p>
            Det krånglade en hel del med Scrutinizer i början och som var frustrerande först. Men nu i efterhand funkar det bättre. Så första intrycket
            var inget positivt om verktyget då det krånglade då jag använde * och inte en . när jag pushade till mitt github repo. På så sätt fick jag
            inte några viktiga filer som krävdes. Det var mer ett fel från min sida men tycker det borde stått någonstans. Utöver det tog det också lång
            tid innan verktyget hade kört färdigt och man kunde se sitt resultat. Men ska man titta bort från det så verkar verktyget vara intressant,
            och badgesen kan vara bra då det visar snabbt hur bra eller dålig sin kod är. Efter första testet hade jag kodtäckning på 13% och
            kodkvalitet på 9.78. Efter förbättringarna fick jag kodtäckning på 18% samt kodkvalitet på 9.79.
        </p>
        <p>
            Tycker kodkvaliteten är en bra indikation på hur din kodstruktur är. Följer man de olika kodstandarder som finns så brukar och bör sin
            kodkvalité vara relativt bra. Genom badges tycker jag man kan på ett smidigt sätt visa upp sin kodkvalité även fast det kanske inte är
            allt för viktigt, så länge sidan fungerar snabbt och smidigt överlag. Det är enligt mig det viktigaste.
        </p>
        <p>
            Under detta kmom testade vi på olika verktyg för att kontrollera sin kodstruktur och för att kunna ändra och fixa de olika fel eller
            områden som var under förväntan. Visste sedan innan att det skulle vara en del som saknades då jag inte har gjort tester för varje
            klass eller kontroller jag har, men fick även se lite annat som kan vara intressant för en del programmerare, till exempel sin kods
            komplexitet.
        </p>
    </div>
    <div class="right report-small sticky">
        <p><a href="#top">Top</a></p>
        <p><a href="#kmom01">Kmom01</a></p>
        <p><a href="#kmom02">Kmom02</a></p>
        <p><a href="#kmom03">Kmom03</a></p>
        <p><a href="#kmom04">Kmom04</a></p>
        <p><a href="#kmom05">Kmom05</a></p>
        <p><a href="#kmom06">Kmom06</a></p>
    </div>
{% endblock %}